	Ursache Andrei - 312CA - 10 mai 2014
	
	
	Aspecte generale:
	
	Pentru aceasta tema am creeat doua structuri de date utilizate in stocarea
si returnarea cuvintelor, respectiv o structura de tip treap (Treap.h) si o 
structura de tip Trie (Trie.h). De asemenea am creeat si o structura ce retine 
informatiile necesare despre un cuvant din "baza" noastra de date: valoarea sa
si frecventa cu care a aparut.
	In realizarea Treap-ului am utilizat (oarecum) structura data (de fapt, care 
va fi data) la laborator, pastrand aceeasi idee de implementare (noduri nil,
metode).
	Mentionez ca nu am utilizat variabile globale, structuri gata implementate
de STL (inafara de std::string, mentionata in enunt), alte structuri de date sau
orice alt concept "sensibil" nepermis de enunt.
	
	
	Ideea generala a programului:
	
	Programul pe care l-am realizat primeste initial un set de date din fisierul
"date.in" de tipul: cuvant frecventa. Pe baza acestor date programul raspunde la
un numar dat de interogari, returnand cuvantul cu cel mai mare numar de aparitii
corespunzator unei insiruiri de taste. Se poate observa si modul de "invatare" 
a programului, deoarece "baza de date" de care dispune se modifica la fiecare 
operatie, crescand frecventa cuvantului folosit.
	
	
	Structurile de date folosite:
	
	Dupa cum a si fost sugerat de catre enuntul temei, m-am folosit de o
structura de date de tip trie (care "ajunge" la cuvantul dorit in O(lngime
cuvant)) in nodurile careia se afla o structura de tip treap. Pe scurt datele
se regasesc intr-un Trie de noduri Treap<Word>. Cu alte cuvinte, cand programul
primeste o combinatie de taste ("6373"), acesta parcurge acest "drum" in trie si
ajunge in trap-ul in care se gasesc toate cuvintele disponibile formate din
aceasta combinatie de taste, impreuna cu numarul de aparitii. In functie de
frecventa dorita, se cauta in treap al k-lea element in ordinea descrescatoare
a numarului de aparitii si se returneaza.

	Word:
		
		Aceasta structura retine datele prin care poate fi identificat un cuvant
	si este utilizata de catre treap, pentru stocarea datelor. Ea retine atat
	valoarea literala a cuvantului cat si numarul de aparitii a acestuia. Pentru
	a se efectua corect comparatiile din Treap, am supraincarcat operatorii >, <
	==, dar si ++ pentru o incrementare mai naturala a numarului de aparitii.
		Astfel, cuvant1 este mai mare decat cuvant2 daca primul are un numar de
	aparitii mai mare decat al doilea SAU cele doua cuvinte au un numar egal de 
	aparitii, dar primul este mai mic din punct de vedere lexicografic decat cel
	de-al doilea.
	
	Treap:
	
		Pentru aceasta structura generica am pastrat tipul de implementare din 
	laborator. Prioritatile nodurilor sunt alese in mod aleator (invariantul de
	heap), iar cheia unui nod este reprezentata de un obiect de tip Word 
	(invariantul de arbore de cautare asigurat de operatorii supracincarcati
	in Word).
		Functiile de insert si erase sunt implementate cu ajutorul rotatiilor
	dreapta si stanga ce pastreaza structura de arbore de cautare.
		Fiecare nod retine si numarul de noduri din subarborele sau (inclusiv cu
	el insusi). Acest contor ajuta functia findK ce returneaza a k-lea cuvant
	din Treap in ordine crescatoare (find(1) va returna cuvantul cu cel mai mic
	numar de aparitii - in tema se doreste returnarea elementului de pe pozitia
	k in ordine descrescatoare, findK(1) fiind cuvantul cu numar maxim de 
	aparitii => findK(nr_total_noduri - k)).
	
		Am utilizat in unele functii variabile statice deoarece am vrut sa
	pastrez o comportare cat mai naturala a apelurilor recursive. Nu am vrut, de
	exemplu, sa apelez functia cu un nou k, mai mic, din care am scazut un
	anumit numar, ci am vrut sa fie apelata la fel si sa modific doar o varaila
	statica ce indica locul ocupat de cuvantul curent. Aceasta abordare se
	regaseste in mai multe functii, din acelasi motiv.
	
	Trie:
		
		Fiecare nod din aceasta structura contine un Treap (un pointer catre
	o structura de treap) si un vectori de pointeri (respectiv 8) la alte
	noduri de tip Trie. Astfel pornind din nodul de baza (gol) se poate
	ajunge la "destinatia" dorita mergand pe nodurile corespunzatoare 
	"drumului".	De exemplu, pentru calea "6373" se porneste din nodul radacina.
	Se acceseaza nod[6-2] = nod[4] corespunzator valorii 6. Din nodul nod[4] 
	se merge catre nod [3-2] = nod[1] si tot asa pana la finalul "drumului" unde
	se gaseste treapul care contine cuvantul dorit.
		Pe acest model sunt realizate recursiv functiile de insert si ge_trep
	(care returneaza treapul corespunzator destinatiei unui drum). La apelarea
	functiei insert, daca nu se gaseste drumul dorit, se aloca memorie pentru
	noile noduri pana la destinatie. Funcia insert primeste un parametru care
	reprezinta drumul si un parametru de tip Word care reprezinta cheia ce va
	fi inserata in treapul de la destinatie.
		
	
	Implementarea programului: main.cpp
		
		Programul citeste (din date.in) un numar dat de cuvinte si frecvente si
	le insereaza pe rand in trie, dupa care cinteste numarul de operatii. Pentru
	fiecare operatie in parte se citeste combinatia de numere primita. Mai intai
	se parseaza formatul sirului cu ajutorul metodelor specifice std::string si 
	se obtine si x+1 (in cazul in care este dat, de exemplu, 6373*2, x+1 = 2).
		Se extrage treapul de la "drumul" dat, precum si numarul de cuvinte 
	existente in el. Se determina cu functia findK al k-lea element in ordinea
	descrescatoare a frecventei: 
		
		word = treap->findK(capacity - count % capacity)
		
	de unde se observa ca se pot da si valori mai mari decat capacitatea.
		Se afiseaza valoarea cuvantului obtinut. Acesta se sterge din treap, i
	se incrementeaza numarul de aparitii si se introduce din nou si se trece la
	urmatoarea operatie.
		
		Astfel, programul simuleaza tastatura unui telefon mobil care invata
	pe parcurs ce cuvinte folosim cel mai des (care au probabilitatea cea mai 
	mare sa apara).
	
	

	(!!!) 	Alte detalii referitoare la implementarea temei se regasesc in 
			fisierele sursa.


	Nota personala:
	
		As putea spune, ce mai "grea" tema la SD (dar nu foarte)... era 
	de asteptat fiind ultima dintre ele. A fost interesanta pentru ca m-am 
	acomodat cu structuri "putin" mai complexe fata de ce am facut pana acum si 
	prin modul in care le-am combinat pentru a obtine o performanta buna.
	
	
	
	Andrei Ursache

